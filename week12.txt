# 12장 1206 강의 요약

각 프로세스가 생성될 때마다 메모리 영역이 따로 잡힘
shared 메모리를 만들면 
공유 메모리는 os영역에 잡히게 됨

shminit.h
shmsum.h

cpu 1개 
p1에게 줬다가 p2에게 줌 .. 왔다갔다 하는 일이 os가 하는 일

문제 발생: cpu가 실행할 때 어셈블리 언어로 바꿔서 사용하게 됨 
x=x+1이 cpu에서는 3가지 명령어로 쪼개서 실행됨
load $1, = x
add $1, $1, #1
store $1, = x

서로 다른 메모리를 동시에 읽고 쓰면 중간에 write가 끼게 되면 race condition이 발생할 수 도 있음(os과목에서)

하드웨어는 하나인데 어떻게 하면 여러 개의 프로그램을 실행할 수 있을까? -> os

————————————
오늘 할 거: semaphore
다음 시간: mutex lock

[semaphore]
두 개 이상의 프로세스가 동시에 공유 메모리와 같은 공유 자원을 접근할 때 동기화를 걸어줌
정수형 변수, wait, post만 사용 가능

semaphore: 정수형 변수 s
wait()
함수: while(s<=0){block;} s—;

post(signal())
함수: s++;

init() 
딱 한번 초기화할 수 있음

wait와 post로 수행: 증가 또는 감소할 수 있음

int a; 
a 정수를 저장 
+ 연산자


 gcc semainit.c -o semainit -lpthread
: 라이브러리를 포함해서 컴파일

세마포어 삭제해야 함 
rm 


s_wait.c
sem_wait(sem);
현재 값이 0보다 작거나 같으면 무한 block

공유변수를 읽을 때 세마포어를 사용
초기값을 2로 하면 동시에 두 프로세스가 일을 수행할 수 있디

초기값을 2로 설정을 했는데 4명이 실행하면 4명 중 2명이 동시에 수행할 수 있다

초기값을 3으로 설명을 하면 동시에 3명이 수행할 수 있다


ipcs -a   // 모든 IPC 자원을 조회
ipcs -q   // 메시지 큐 자원을 조회
ipcs -m   // 공유메모리 자원을 조회
ipcs -s    // 세마포어 자원을 조회 
ipcrm -q  [ID]  // 해당 메시지 큐 자원을 삭제
ipcrm -m [ID]  // 해당 공유메모리 자원을 삭제
ipcrm -s  [ID]  // 해당 세마포어 자원을 삭제

2개의 세마포어, 1개의 공유변수
